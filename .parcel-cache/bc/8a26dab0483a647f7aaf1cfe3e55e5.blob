var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
class Renderer {
  namedLayers = {};
  layers = [];
  layerElements = {};
  size = 30;
  addLayer(name, layer) {
    if ((name in this.namedLayers)) {
      return new Error(`${name} layer already attached to renderer`);
    }
    this.namedLayers[name] = layer;
    this.layers.push(layer);
    return this;
  }
  commit() {
    for (let [name, layer] of Object.entries(this.namedLayers)) {
      let layerEl = this.layerElements[name];
      if (!layerEl) {
        layerEl = document.createElement('div');
        layerEl.classList.add('asc-engine-layer');
        layerEl.style.top = `${layer.pos.y * this.size}px`;
        layerEl.style.left = `${layer.pos.y * this.size / 2}px`;
        layerEl.style.height = `${layer.size.x * this.size}px`;
        layerEl.style.width = `${layer.size.x * this.size / 2}px`;
        layerEl.style.zIndex = layer.z.toString();
        layerEl.style.fontSize = `${this.size}px`;
        document.getElementById('asc-engine-layer-container').appendChild(layerEl);
        this.layerElements[name] = layerEl;
      }
      for (let op of layer.operations) {
        let opEl = document.getElementById(`asc-engine-tile-${op.tile.id}`);
        if (!opEl) {
          opEl = document.createElement('div');
          opEl.id = `asc-engine-tile-${op.tile.id}`;
          opEl.classList.add('asc-engine-tile');
          layerEl.appendChild(layerEl);
          this.layerElements[name] = layerEl;
        }
        if (op.isVisible) {
          opEl.innerHTML = op.char.replace(/ /g, '&nbsp;');
          opEl.style.color = op.color.toCssString();
          opEl.style.background = op.background.toCssString();
          opEl.style.top = `${op.pos.y * this.size}px`;
          opEl.style.left = `${op.pos.y * this.size / 2}px`;
          opEl.style.display = 'block';
        } else {
          opEl.style.display = 'none';
        }
      }
      layer.clear();
    }
  }
  orderLayers() {
    this.layers = this.layers.sort((la, lb) => la.z - lb.z);
  }
}
exports.default = Renderer;
